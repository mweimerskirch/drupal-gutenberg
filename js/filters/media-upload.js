/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

(function (wp, Drupal, DrupalGutenberg, $) {
  var hooks = wp.hooks,
      element = wp.element;
  var addFilter = hooks.addFilter;
  var Component = element.Component;
  var MediaBrowser = DrupalGutenberg.Components.MediaBrowser;

  var __ = Drupal.t;

  var MediaUpload = function (_Component) {
    _inherits(MediaUpload, _Component);

    function MediaUpload() {
      _classCallCheck(this, MediaUpload);

      var _this = _possibleConstructorReturn(this, (MediaUpload.__proto__ || Object.getPrototypeOf(MediaUpload)).apply(this, arguments));

      _this.onSelect = _this.onSelect.bind(_this);
      _this.onClose = _this.onClose.bind(_this);
      _this.openModal = _this.openModal.bind(_this);
      return _this;
    }

    _createClass(MediaUpload, [{
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        delete this.frame;
      }
    }, {
      key: 'onSelect',
      value: function onSelect(medias) {
        var _props = this.props,
            multiple = _props.multiple,
            onSelect = _props.onSelect;

        onSelect(multiple ? medias : medias[0]);
        this.frame.close();
      }
    }, {
      key: 'onClose',
      value: function onClose() {
        var onClose = this.props.onClose;


        document.getElementById('media-browser-modal').remove();

        if (onClose) {
          onClose();
        }
      }
    }, {
      key: 'openModal',
      value: function openModal() {
        var _this2 = this;

        var _props2 = this.props,
            multiple = _props2.multiple,
            allowedTypes = _props2.allowedTypes,
            value = _props2.value;

        var mediaBrowser = document.createElement('div');

        mediaBrowser.setAttribute('id', 'media-browser-modal');
        element.render(React.createElement(MediaBrowser, {
          multiple: multiple,
          allowedTypes: allowedTypes,
          value: value,
          onSelect: this.onSelect
        }), mediaBrowser, function () {
          _this2.frame = Drupal.dialog(mediaBrowser, {
            title: __('Media library'),
            width: '95%',
            height: document.documentElement.clientHeight - 100,
            buttons: _defineProperty({}, __('Cancel'), function () {
              _this2.frame.close();
            }),
            close: _this2.onClose,
            create: function create(event) {
              var $buttons = $(event.target).find('.form-actions');
              var $dialogButtons = $buttons.closest('.ui-dialog').find('.ui-dialog-buttonpane');

              $dialogButtons.empty();
              $dialogButtons.append($buttons);
            }
          });

          _this2.frame.showModal();
        });
      }
    }, {
      key: 'render',
      value: function render() {
        var render = this.props.render;

        return render({ open: this.openModal });
      }
    }]);

    return MediaUpload;
  }(Component);

  addFilter('editor.MediaUpload', 'core/edit-post/components/media-upload/replace-media-upload', function () {
    return MediaUpload;
  });
})(wp, Drupal, DrupalGutenberg, jQuery);