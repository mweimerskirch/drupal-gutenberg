/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

(function (wp, $, Drupal, drupalSettings, DrupalGutenberg) {
  var data = wp.data,
      blocks = wp.blocks,
      element = wp.element,
      blockEditor = wp.blockEditor;
  var Fragment = element.Fragment;
  var RichText = blockEditor.RichText;
  var _DrupalGutenberg$Comp = DrupalGutenberg.Components,
      DrupalIcon = _DrupalGutenberg$Comp.DrupalIcon,
      DrupalMediaEntity = _DrupalGutenberg$Comp.DrupalMediaEntity;
  var select = data.select;

  var gutenberg = drupalSettings.gutenberg || {};
  var isMediaLibraryEnabled = gutenberg['media-library-enabled'] || false;
  var isMediaEnabled = gutenberg['media-enabled'] || false;
  var __ = Drupal.t;

  var registerBlock = function registerBlock() {
    var blockId = 'drupalmedia/drupal-media-entity';

    blocks.registerBlockType(blockId, {
      title: Drupal.t('Drupal Media Entity'),
      icon: 'admin-media',
      category: 'drupal_media',
      supports: {
        align: false,
        html: false,
        reusable: false
      },
      attributes: {
        mediaEntityIds: {
          type: 'array'
        },
        viewMode: {
          type: 'string',
          default: 'default'
        },
        caption: {
          type: 'string',
          default: ''
        },
        lockViewMode: {
          type: 'boolean',
          default: false
        },
        allowedTypes: {
          type: 'array',
          default: ['image', 'video', 'audio', 'application']
        }
      },
      edit: function edit(_ref) {
        var attributes = _ref.attributes,
            className = _ref.className,
            setAttributes = _ref.setAttributes,
            isSelected = _ref.isSelected,
            clientId = _ref.clientId;
        var mediaEntityIds = attributes.mediaEntityIds,
            caption = attributes.caption;


        return React.createElement(
          'figure',
          { className: className },
          React.createElement(DrupalMediaEntity, {
            attributes: attributes,
            className: className,
            setAttributes: setAttributes,
            isSelected: isSelected,
            isMediaLibraryEnabled: isMediaLibraryEnabled,
            clientId: clientId
          }),
          mediaEntityIds && mediaEntityIds.length > 0 && (!RichText.isEmpty(caption) || isSelected) && React.createElement(RichText, {
            tagName: 'figcaption',
            placeholder: __('Write captionâ€¦'),
            value: caption,
            onChange: function onChange(value) {
              return setAttributes({ caption: value });
            }
          })
        );
      },
      save: function save() {
        return null;
      }
    });
  };

  var registerDrupalMedia = function registerDrupalMedia() {
    return new Promise(function (resolve) {
      var category = {
        slug: 'drupal_media',
        title: Drupal.t('Drupal Media')
      };

      var categories = [].concat(_toConsumableArray(data.select('core/blocks').getCategories()), [category]);

      if (isMediaEnabled) {
        data.dispatch('core/blocks').setCategories(categories);
        registerBlock();
      }

      resolve();
    });
  };

  window.DrupalGutenberg = window.DrupalGutenberg || {};
  window.DrupalGutenberg.registerDrupalMedia = registerDrupalMedia;
})(wp, jQuery, Drupal, drupalSettings, DrupalGutenberg);