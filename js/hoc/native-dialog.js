/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

(function (wp, $, drupalSettings, Drupal) {
  var withNativeDialog = function withNativeDialog(Component) {
    var onDialogInsert = function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(element, props) {
        var onSelect, handlesMediaEntity, selections, response, data, _response;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                onSelect = props.onSelect, handlesMediaEntity = props.handlesMediaEntity;
                selections = [].concat(_toConsumableArray(getDefaultMediaSelections()), _toConsumableArray(getSpecialMediaSelections()));

                selections = encodeURIComponent(selections[0]);

                if (!handlesMediaEntity) {
                  _context.next = 13;
                  break;
                }

                _context.next = 6;
                return fetch(drupalSettings.path.baseUrl + 'editor/media/render/' + selections);

              case 6:
                response = _context.sent;
                _context.next = 9;
                return response.json();

              case 9:
                data = _context.sent;

                data && data.media_entity && data.media_entity.id && onSelect(data.media_entity.id);
                _context.next = 21;
                break;

              case 13:
                _context.next = 15;
                return fetch(drupalSettings.path.baseUrl + 'editor/media/load-media/' + selections);

              case 15:
                _response = _context.sent;
                _context.t0 = onSelect;
                _context.next = 19;
                return _response.json();

              case 19:
                _context.t1 = _context.sent;
                (0, _context.t0)(_context.t1);

              case 21:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function onDialogInsert(_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }();

    var onDialogCreate = function onDialogCreate() {
      drupalSettings.media_library = drupalSettings.media_library || {};
      drupalSettings.media_library.selection_remaining = drupalSettings.media_library.selection_remaining || 1;

      setTimeout(function () {
        $('#media-library-wrapper li:first-child a').click();
      }, 0);
    };

    var getDefaultMediaSelections = function getDefaultMediaSelections() {
      return Drupal.MediaLibrary.currentSelection || [];
    };

    var getSpecialMediaSelections = function getSpecialMediaSelections() {
      return [].concat(_toConsumableArray(Drupal.SpecialMediaSelection.currentSelection || [])).map(function (selection) {
        return JSON.stringify(_defineProperty({}, selection.processor, selection.data));
      });
    };

    var onDialogClose = function onDialogClose() {
      var modal = document.getElementById('media-entity-browser-modal');
      if (modal) {
        modal.remove();
      }

      var nodes = document.querySelectorAll('[aria-describedby="media-entity-browser-modal"]');
      nodes.forEach(function (node) {
        return node.remove();
      });
    };

    var getDialog = function getDialog(_ref2) {
      var allowedTypes = _ref2.allowedTypes;

      return new Promise(function (resolve, reject) {
        wp.apiFetch({
          path: 'load-media-library-dialog',
          data: { allowedTypes: allowedTypes }
        }).then(function (result) {
          resolve({
            component: function component(props) {
              return React.createElement('div', _extends({}, props, { dangerouslySetInnerHTML: { __html: result.html } }));
            }
          });
        }).catch(function (reason) {
          reject(reason);
        });
      });
    };

    return function (props) {
      return React.createElement(Component, _extends({}, props, {
        onDialogCreate: onDialogCreate,
        onDialogInsert: onDialogInsert,
        onDialogClose: onDialogClose,
        getDialog: getDialog }));
    };
  };

  window.DrupalGutenberg = window.DrupalGutenberg || {};
  window.DrupalGutenberg.Components = window.DrupalGutenberg.Components || {};
  window.DrupalGutenberg.Components.withNativeDialog = withNativeDialog;
})(wp, jQuery, drupalSettings, Drupal);